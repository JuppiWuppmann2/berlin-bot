name: Bluesky Bot
on:
  schedule:
    - cron: "*/10 * * * *"   # alle 10 Minuten (statt 5, um Rate-Limits zu vermeiden)
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Timeout nach 15 Minuten
    
    steps:
      # Repo auschecken mit Schreibrechten durch GH_PAT
      - uses: actions/checkout@v4  # Aktuellere Version
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 1  # Shallow clone für bessere Performance
      
      # Python einrichten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'  # Pip-Cache für schnellere Builds
      
      # Dependencies installieren mit Version-Pinning
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install selenium==4.15.0 webdriver-manager==4.0.1 atproto==0.0.46 beautifulsoup4==4.12.2
      
      # Chrome und ChromeDriver für bessere Stabilität vorbereiten
      - name: Setup Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable xvfb
          
          # Chrome-Version überprüfen
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1-3)
          echo "Chrome Version: $CHROME_VERSION"
          
          # ChromeDriver direkt installieren (robuster als WebDriverManager)
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # Überprüfen
          chromedriver --version
          which chromedriver
      
      # Bot mit erweiterten Umgebungsvariablen ausführen
      - name: Run bot
        run: |
          # Virtual display für Headless-Chrome
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          
          # Chrome-Optionen setzen
          export CHROME_BIN=/usr/bin/google-chrome
          export CHROMEDRIVER_VERBOSE=1
          
          # Bot ausführen mit Timeout
          timeout 12m python bot.py || echo "Bot-Timeout erreicht"
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
          # Logging-Level setzen
          PYTHONUNBUFFERED: 1
          # Chrome-spezifische Umgebungsvariablen
          CHROME_LOG_FILE: /tmp/chrome.log
      
      # Log-Output für Debugging (bei Fehlern)
      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Chrome Logs ==="
          cat /tmp/chrome.log 2>/dev/null || echo "Keine Chrome-Logs verfügbar"
          echo "=== System Info ==="
          df -h
          free -m
          ps aux | grep chrome | head -10
      
      # Aktualisierte data.json committen und pushen
      - name: Commit and push updated state
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Nur committen wenn sich data.json geändert hat
          if git diff --quiet data.json; then
            echo "Keine Änderungen in data.json"
          else
            echo "Änderungen in data.json gefunden, committe..."
            git add data.json
            
            # Auch Backup-Datei hinzufügen falls vorhanden
            if [ -f data_backup.json ]; then
              git add data_backup.json
            fi
            
            # Commit mit detaillierterer Nachricht
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            git commit -m "Update state file - $TIMESTAMP [skip ci]"
            
            # Push mit Retry-Logic
            for i in {1..3}; do
              if git push origin HEAD:main; then
                echo "✅ Push erfolgreich (Versuch $i)"
                break
              else
                echo "❌ Push fehlgeschlagen (Versuch $i), warte 5 Sekunden..."
                sleep 5
              fi
            done
          fi
      
      # Cleanup (optional, für bessere Performance)
      - name: Cleanup
        if: always()
        run: |
          # Chrome-Prozesse beenden
          pkill -f chrome || true
          pkill -f Xvfb || true
          
          # Temporäre Dateien löschen
          rm -rf /tmp/.org.chromium.Chromium.* 2>/dev/null || true
          rm -f /tmp/chrome.log 2>/dev/null || true
